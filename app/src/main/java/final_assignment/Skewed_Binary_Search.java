/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package final_assignment;

import java.util.Arrays;

public class Skewed_Binary_Search {

    static class Sorted_Array {
    private int[] S;
    private double alpha;

    public Sorted_Array(int[] input, double alpha){
        Arrays.parallelSort(input);
        this.S = input;
        this.alpha = alpha;
    }

    public int Pred(int x) {
        int left = 0;
        int right = S.length - 1;
        int y = Integer.MAX_VALUE;

        while (left <= right) {
            int mid = left + (int) Math.round((right - left) * alpha);

            if (S[mid] < x) {
                left = mid + 1;
            } else if (S[mid] > x) {
                right = mid - 1;
            } else if (S[mid] == x) {
                y = S[mid];
                break;
            }
        }
        return y;
        
    }
    public static void main(String[] args) {       
        int[] inputArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        double alpha = 0.3;
        int existingElement = 5;
        Skewed_Binary_Search.Sorted_Array testSortedArray = new Sorted_Array(inputArray, alpha);
        System.out.println(testSortedArray.Pred(existingElement));
    }
}


class Node {
    int key;
    Node left, right;

    public Node(int item) {
        key = item;
        left = right = null;
    }
}

class BinarySearchTree {
    Node root;

    BinarySearchTree() {
        root = null;
    }

    void insert(int key) {
        root = insertRec(root, key);
    }

    Node insertRec(Node root, int key) {
        if (root == null) {
            root = new Node(key);
            return root;
        }

        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);

        return root;
    }

    void inorder() {
        inorderRec(root);
    }

    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.key + " ");
            inorderRec(root.right);
        }
    }

    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();

        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);

        tree.inorder();
    }
}
    
}




